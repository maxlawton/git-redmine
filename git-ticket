#!/bin/sh

# ==========================================================================
# Common functionality - from gitflow-common
# --------------------------------------------------------------------------

warn() { echo "$@" >&2; }
die() { warn "$@"; exit 1; }

# ==========================================================================
# Basic ticket information functions
# --------------------------------------------------------------------------

_ticket_name()
{
    echo "ticket/${1}"
}

_ticket_number()
{
    git branch 2>/dev/null \
        | grep -e '^* ticket' \
        | sed -e 's/* ticket[\/-]\([0-9]\{1,\}\)/\1/'
}

_current_branch()
{
    git branch 2>/dev/null \
        | grep -e '^* ' \
        | sed -e 's/* \(.*\)/\1/'
}

_branch_exists()
{
    `git show-ref --verify --quiet refs/heads/"$1"` \
        && echo !$?
}

_remote_branch_exists()
{
    `git show-ref --verify --quiet remotes/origin/"$1"` \
        && echo !$?
}

_tracker()
{
    local tracker=$(git config --get ticket.tracker)
    test $? && die "Git config 'ticket.tracker' is undefined"
    $tracker "$@"
}

# ==========================================================================
# Git macros
# --------------------------------------------------------------------------

_git_delete_branch()
{
    branch=$1
    test -z $branch && die "branch required."
    if [ $(_branch_exists $branch) ]; then
        git branch -d $branch
    else
        die "No local branch '$branch' to delete."
    fi
    if [ $(_remote_branch_exists $branch) ]; then
        git branch -d -r origin/$branch
        git push origin :refs/heads/$branch
    else
        die "No remote branch of ${branch}."
    fi
    exit 0
}

_git_count_incoming()
{
    branch=$1
    current=$(_current_branch)
    git log --pretty=%p "$branch" "^$current" | wc -l
}

# ==========================================================================
# The Subcommands
# --------------------------------------------------------------------------


usage()
{
	echo "usage: git ticket <number|subcommand>"
	echo
	echo "Available subcommands are:"
    echo "   number  Get the number of the current ticket."
	echo "   list    Show all of your ticket/#... branches."
	echo "   open    Create or switch to a ticket branch."
	echo "   browse  Launch the tracking page for current ticket url."
	echo "   status  Show information about a ticket from tracking system."
	echo "   stage*  Merge a ticket's changes into current branch."
	echo "   close*  Merge and delete specified ticket's branches."
	echo
}


main()
 {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

    case "$1" in

        number|no)
            ticket=$(_ticket_number)
            branch=$(_current_branch)
            test -z "$ticket" && exit 1
            # && echo "'$branch' is not a ticket branch." 1>&2
            echo "$ticket"
            exit $?
            ;;

        list)
            shift;
            git branch "$@" | grep -e 'ticket[/-]#\?[0-9]\+'
            ;;

        view|browse|update|status|subject|edit)
            _tracker "$@"
            exit $?
            ;;

        stage)
            shift;
            test -z $1 && die "ticket <number> required."

            number="$1"; shift
            subject=$(_tracker subject "$number")
            percent=$(echo "${1:-100}" | sed -e 's/\([0-9]\{1,\}\)$/\1%/')
            branch=$(_ticket_name "$number")

            if [ $(_git_count_incoming $branch) -gt 1 ]; then
                git merge --no-ff $branch -e -m"[#${number}] ${subject} (Staged ${percent})"
            else
                git merge $branch
            fi
            exit 0
            ;;

        close)
            shift;
            test -z $1 && die "ticket <number> required."
            number="$1"; shift
            subject=$(_tracker subject "$number")
            branch=$(_ticket_name "$number")
            percent=$(echo "${1:-100}" | sed -e 's/\([0-9]\{1,\}\)$/\1%/')

            if [ $(_git_count_incoming $branch) -gt 1 ]; then
                git merge --no-ff $branch -e -m"[#${number}] ${subject} (Closed ${percent})" \
                    && _git_delete_branch $branch
            else
                git merge $branch && _git_delete_branch $branch
            fi
            exit 0
            ;;

        not-in)
            shift
            other="${1:-dev-master}"
            current=$(_current_branch)
            git log "$(_current_branch)" "^$other"
            ;;

        delete|del)
            test -z $2 && die "ticket <number> required."
            branch=$(_ticket_name $2)
            _git_delete_branch $branch
            # echo "You're gonna have to pull the trigger yourself:"
            # echo git branch -D $branch
            ;;

        create)
            die "Ticket creation is not supported."
            #_curl_redmine_create "${@:2}"
            ;;

        *|open|start|switch)
            case "$1" in
                ("start"|"open"|"switch") shift;;
            esac

            if [ ! -z "${1##*[!0-9]*}" ]; then
                branch=$(_ticket_name $1)
            else
                die "ticket <number> required."
            fi

            if [ ! $(_branch_exists $branch) ]; then
                git checkout -b $branch &> /dev/null
            else
                git checkout $branch &> /dev/null
            fi
            exit $?
            ;;
    esac

    exit $?
}

main "$@"
